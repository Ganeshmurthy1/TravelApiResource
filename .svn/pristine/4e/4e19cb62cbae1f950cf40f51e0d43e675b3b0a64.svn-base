<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.2.xsd">


	<!-- Use spring servlet for all requests, including static resources -->
	<mvc:default-servlet-handler />

	<context:component-scan base-package="com.arkadias.html5"
		use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller"
			type="annotation" />
	</context:component-scan>

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods 
		Also registers default Formatters and Validators for use across all @Controllers -->
	<!-- <mvc:annotation-driven conversion-service="applicationConversionService"/> -->


	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources -->
	<mvc:resources location="/, classpath:/META-INF/web-resources/"
		mapping="/resources/**" />
	<!-- Handles HTTP GET requests for static resources by efficiently serving 
		up content from the ${webappRoot}/** directories -->
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/img/**" location="/img/" />
	<!-- Use @MVC annotations -->
	<mvc:annotation-driven />


	<!-- User @Controller, @Service... annotations -->
	<context:component-scan base-package="thymeleafexamples.springmail" />

	<!-- Read configuration properties -->
	<context:property-placeholder location="classpath:configuration.properties" />
	<!-- <context:property-placeholder location="classpath:CommonConfig.properties" 
		/> -->

	<!-- Message externalization/internationalization -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="Messages" />
	</bean>



	<!-- Multipart form support -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760" /> <!-- 10 Mb -->
	</bean>


	<!-- Email support -->
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="${mail.server.host}" /> <property name="port" 
		value="${mail.server.port}" /> <property name="username" value="${mail.server.username}" 
		/> <property name="password" value="${mail.server.password}" /> <property 
		name="javaMailProperties"> <util:properties location="classpath:javamail.properties" 
		/> </property> <property name="javaMailProperties"> <props> <prop key="mail.smtp.auth">true</prop> 
		<prop key="mail.smtp.starttls.enable">true</prop> </props> </property> </bean> -->
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="mail.tayyarah.co.in" /> <property name="port" 
		value="25" /> <property name="username" value="care@tayyarah.co.in" /> <property 
		name="password" value="intellicomm@123" /> <property name="javaMailProperties"> 
		<props> <prop key="mail.smtp.auth">true</prop> <prop key="mail.smtp.starttls.enable">false</prop> 
		</props> </property> </bean> -->


	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="no-reply@tayyarah.com" />
		<property name="password" value="tayyarah@123" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>


	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="smtp.gmail.com" /> <property name="port" value="587" 
		/> <property name="username" value="tayyarahwin@gmail.com" /> <property name="password" 
		value="intellicomm@123" /> <property name="javaMailProperties"> <props> <prop 
		key="mail.smtp.auth">true</prop> <prop key="mail.smtp.starttls.enable">true</prop> 
		</props> </property> </bean> -->

	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="smtp.mandrillapp.com" /> <property name="port" 
		value="587" /> <property name="username" value="Intellicomm Solutions" /> 
		<property name="password" value="N4gvhshQZCf4eRTUW1QjSQ" /> <property name="javaMailProperties"> 
		<props> <prop key="mail.smtp.auth">true</prop> <prop key="mail.smtp.starttls.enable">true</prop> 
		</props> </property> </bean> -->

	<!-- THYMELEAF: Template Resolver for email templates -->
	<bean id="emailTemplateResolver"
		class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
		<!-- <property name="prefix" value="mail/" /> cc.lintasmail -->
		<!-- <property name="prefix" value="Tayyarahmail/" /> -->
		<property name="prefix" value="${cc.allmail}" />
		<property name="templateMode" value="HTML5" />
		<property name="characterEncoding" value="UTF-8" />
		<property name="order" value="1" />
		<!-- Template cache is true by default. Set to false if you want -->
		<!-- templates to be automatically updated when modified. -->
		<property name="cacheable" value="true" />
	</bean>

	<!-- THYMELEAF: Template Resolver for webapp pages -->
	<!-- (we would not need this if our app was not web) -->
	<bean id="webTemplateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/templates/" />
		<property name="templateMode" value="HTML5" />
		<property name="characterEncoding" value="UTF-8" />
		<property name="order" value="2" />
		<!-- Template cache is true by default. Set to false if you want -->
		<!-- templates to be automatically updated when modified. -->
		<property name="cacheable" value="true" />
	</bean>

	<bean id="emailTemplateCorporateResolver" class="org.thymeleaf.templateresolver.FileTemplateResolver">
		<property name="prefix" value="${cc.testcorporatemail}" />
		<property name="templateMode" value="HTML5" />
		<property name="characterEncoding" value="UTF-8" />
		<property name="order" value="3" />
		<property name="cacheable" value="true" />
	</bean>
	<!-- THYMELEAF: Template Engine (Spring3-specific version) -->
	<bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<property name="templateResolvers">
			<set>
				<ref bean="emailTemplateResolver" />
				<ref bean="webTemplateResolver" />
				<ref bean="emailTemplateCorporateResolver" />
			</set>
		</property>
	</bean>

	<!-- THYMELEAF: View Resolver - implementation of Spring's ViewResolver 
		interface -->
	<!-- (we would not need this if our app was not web) -->
	<bean id="viewResolver" class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
		<property name="characterEncoding" value="UTF-8" />

	</bean>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources -->
	<mvc:resources location="/, classpath:/META-INF/web-resources/"
		mapping="/resources/**" />
	<!-- Handles HTTP GET requests for static resources by efficiently serving 
		up content from the ${webappRoot}/** directories -->
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/img/**" location="/img/" />

</beans>
