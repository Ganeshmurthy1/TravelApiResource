package com.tayyarah.insurance.util;

public enum TrawellTagException {
	
	ERROR100("[100]","Policy Tag Not Found"),
	ERROR101("[101]","Sign tag is Empty"),
	ERROR102("[102]","Riders Tag is empty"),
	ERROR103("[103]","Identity tag is empty "),
	ERROR104("[104]","Plan tag is empty "),
	ERROR105("[105]","Traveldetails tag is empty"),
	ERROR106("[106]","Insured tag is empty "),
	ERROR107("[107]","Contactdetails tag is empty"),
	ERROR108("[108]","Otherdetails tag is empty"),
	ERROR109("[109]","Documents  tag is empty"),
	ERROR110("[110]","Sign length can not be greater than 100"),
	ERROR111("[111]","Agent Sign should match to Rowid of Agent"),
	ERROR112("[112]","Branch Sign tag is Empty"),
	ERROR113("[113]","Branch Sign length can not be greater than 100"),
	ERROR114("[114]","Agent Branch Sign should match to Rowid of Agent Branch"),
	ERROR115("[115]","User name  length can not be greater than 100"),
	ERROR116("[116]","Please check User Name"),
	ERROR117("[117]","Reference Number is Empty"),
	ERROR118("[118]","Reference No can not be greater than 100"),
	ERROR119("[119]","Reference No  already used"),
	ERROR120("[120]","Insurance Category not existed"),
	ERROR121("[121]","Plan  not existed "),
	ERROR122("[122]","Plan  is not valid for this agegroup"),
	ERROR123("[123]","Plan Premium and Base Charges should be equal"),
	ERROR124("[124]","Departure Date should not be empty"),
	ERROR125("[125]","Departure Date should be after current Date"),
	ERROR126("[126]","Departure Date format is wrong"),
	ERROR127("[127]","Insurance Category Code length  can not be greater than 50"),
	ERROR128("[128]","Plan length  can not be greater than 50"),
	ERROR129("[129]","Days should be Numeric"),
	ERROR130("[130]","Days should not  empty"),
	ERROR131("[131]","Arrival  Date should not be empty"),
	ERROR132("[132]","Arrival Date should be after current Date"),
	ERROR133("[133]","Arrival Date format is wrong "),
	ERROR134("[134]","Adress1 length should not  be  greater than 500"),
	ERROR135("[135]","Adress1 should not empty"),
	ERROR136("[136]","Adress2  length should not  be  greater than 500"),
	ERROR137("[137]","City length should not  be  greater than 50"),
	ERROR138("[138]","District length should not  be  greater than 50"),
	ERROR139("[139]","State length should not  be  greater than 50"),
	ERROR140("[140]","Pincode length should not  be  greater than 10"),	
	ERROR141("[141]","Country length should not  be  greater than 100"),
	ERROR142("[142]","Phone No length should not  be  greater than 50"),
	ERROR143("[143]","Mobile No length should not  be  greater than 50"),
	ERROR144("[144]","University Name length should not  be  greater than 100"),
	ERROR145("[145]","University Address length should not  be  greater than 1000"),
	ERROR146("[146]","Name length should not  be  greater than 50"),
	ERROR147("[147]","DOB is not in a correct format"),
	ERROR148("[148]","DOB should not empty"),
	ERROR149("[149]","Dob Date should be before current Date"),
	ERROR150("[150]","Age Should be Numeric"),	
	ERROR151("[151]","Age Should not  be  empty"),
	ERROR152("[152]","TrawellTag No Should be Numeric"),
	ERROR153("[153]","Nominee should not empty"),
	ERROR154("[154]","Nominee length should not  be  greater than 50"),
	ERROR155("[155]","Realation should not empty"),
	ERROR156("[156]","Relation length should not  be  greater than 50"),
	ERROR157("[157]","Pastillness length should not  be  greater than 1000"),
	ERROR158("[158]","Email Address  should not empty"),
	ERROR159("[159]","Email Address  length should not  be  greater than 50"),
	ERROR160("[160]","Email Address is not valid"),	
	ERROR161("[161]","Base Charges or Premium Should be Numeric"),
	ERROR162("[162]","Service Tax Should be Numeric"),
	ERROR163("[163]","Total base Charges Should be Numeric"),
	ERROR164("[164]","Rider is not existed"),
	ERROR165("[165]","Total Charge is not correct"),
	ERROR166("[166]","The age should be equal to the system calculated age at the of Departure Date"),
	ERROR167("[167]","Please Check TrawellTag No is already used or not allocated"),
	ERROR168("[168]","Rider Percent should match to System Calculated Rider Precent"),
	ERROR169("[169]","Document Availabel should be Boolean(True or False)"),
	ERROR170("[170]","Document Code should be equal"),	
	ERROR171("[171]","Please Check UserName is wrong"),
	ERROR172("[172]","Your Departure date should not  after Arrival Date"),
	ERROR173("[173]","Your Arrival date is not correct"),
	ERROR174("[174]","Passport length should not  be  greater than 50"),
	ERROR175("[175]","Authorization  required policy please check documents available True"),
	ERROR176("[176]","Please Check Your Refid is wrong"),
	ERROR177("[177]","Please Check File Path"),
	ERROR178("[178]","File is not existed"),
	ERROR179("[179]","Please Check Your Account Login "),
	ERROR180("[180]","Please Check Your Agent Sign (Key of encrypted format  should match to Decrypted Format)"),	
	ERROR181("[181]","Selling Plan is not Valid for this insurance Category"),
	ERROR182("[182]","Selling Plan is not Allocated to This Agent"),
	ERROR183("[183]","Agent Rowid is  wrong"),
	ERROR184("[184]","Agent Employee User Name is  wrong"),
	ERROR185("[185]","Agent Employee should  have Agent Branch"),
	ERROR186("[186]","Please Check Encrypted file format "),
	ERROR187("[187]","Rider Percent Should have Rider Code (Please Check Rider Percent and Rider)"),
	ERROR188("[188]","Rider Code Should have Rider Percent (Please Check Rider Code and Rider Percent)"),
	ERROR189("[189]","Agent Employee is not Employee of Agent"),
	ERROR190("[190]","XML Tag is not formated well"),	
	ERROR191("[191]","XML Tag or attribute  is missing"),
	ERROR192("[192]","Please Check Policy Tag"),
	ERROR193("[193]","Please Check Identity Tag"),
	ERROR194("[194]","Please Check Sign Tag"),
	ERROR195("[195]","Please Check Branch Sign Tag"),
	ERROR196("[196]","Please Check UserName Tag"),
	ERROR197("[197]","Please Check Reference Tag"),
	ERROR198("[198]","Please Check PlanTag"),
	ERROR199("[199]","Please Check RiderTag"),
	ERROR200("[200]","Passport Field cannot be left blank"),	
	ERROR201("[201]","Address1 Field Cannot be empty"),
	ERROR202("[202]","Address2 Field Cannot be empty"),
	ERROR203("[203]","City Field Cannot be empty"),
	ERROR204("[204]","State Field Cannot be empty"),
	ERROR205("[205]","District Field Cannot be empty"),
	ERROR206("[206]","Phone No Field Cannot be empty"),
	ERROR207("[207]","Mobile No Field Cannot be empty"),
	ERROR208("[208]","Emailaddress Field Cannot be empty "),
	ERROR209("[209]","Nominee Field Cannot be empty "),
	ERROR210("[210]","Relation Field Cannot be empty"),	
	ERROR211("[211]","Pastillness Field Cannot be empty"),
	ERROR212("[212]","Universityname Field Cannot be empty"),
	ERROR213("[213]","Universityaddress Field Cannot be empty"),
	ERROR214("[214]","Branchsign Field Cannot be empty "),
	ERROR215("[215]","User Name Field Cannot be empty"),
	ERROR216("[216]","Reference Field Cannot be empty "),
	ERROR217("[217]","Pincode field cannot be empty"),
	ERROR218("[218]","Name field cannot be left blank"),
	ERROR219("[219]","Country field cannot be left blank"),
	ERROR220("[220]","Please Check Servicetax Tag"),	
	ERROR221("[221]","Please Check TotalCharges Tag"),
	ERROR222("[222]","Please Check Travell Detail Tag"),
	ERROR223("[223]","Please Check departure Date  Tag"),
	ERROR224("[224]","Please Check Days  Tag"),
	ERROR225("[225]","Please Check Arrival Date Tag"),
	ERROR226("[226]","Please Check Insured Tag"),
	ERROR227("[227]","Please Check Contact Details Tag"),
	ERROR228("[228]","Please Check Address1 Tag"),
	ERROR229("[229]","Please Check CityTag"),
	ERROR230("[230]","Please Check District Tag"),	
	ERROR231("[231]","Please Check State Tag"),
	ERROR232("[232]","Please Check CountryTag"),
	ERROR233("[233]","Please Check pincode Tag"),
	ERROR234("[234]","Please Check MobileTag"),
	ERROR235("[235]","Please Check Email Address Tag"),
	ERROR236("[236]","Please Check Name Tag"),
	ERROR237("[237]","Please Check Date of BirthTag"),
	ERROR238("[238]","Please Check Age Tag"),
	ERROR239("[239]","Please Check NomineeTag"),
	ERROR240("[240]","Please Check Relation Tag"),	
	ERROR241("[241]","Please Check Other Detail Tag"),
	ERROR242("[242]","Please Check Rider code percent attribute"),
	ERROR243("[243]","Please Check Document code Available attribute"),
	ERROR244("[244]","Please Check PolicyNumber Tag"),
	ERROR245("[245]","Policy Does not Existed"),
	ERROR246("[246]","Policy already in Policy Cancellation Process"),
	ERROR247("[247]","Policy already in Policy Extension Process"),
	ERROR248("[248]","Please Check Sign"),
	ERROR249("[249]","Policy already in Endorsement Process"),
	ERROR300("[300]","The Size of the Input in CategoryCode is not valid Or not numeric or empty"),	
	ERROR301("[301]","The Size of the Input in plancode is not valid Or not numeric"),
	ERROR302("[302]","The Size of the Input in basecharges is not valid Or not numeric"),
	ERROR303("[303]","The Size of the Input in servicetax is not valid Or not numeric"),
	ERROR304("[304]","The Size of the Input in totalbasecharges is not valid Or not numeric"),
	ERROR305("[305]","The Size of the Input in days is not valid Or not numeric"),
	ERROR306("[306]","Departure date is not in a correct format or empty"),
	ERROR307("[307]","Arrival date is not in a correct format or empty"),
	ERROR308("[308]","DOB is not in a correct format or empty"),
	ERROR309("[309]","The Size of the Input in trawelltagnumber  is not valid Or not numeric"),
	ERROR310("[310]","The Size of the Input in documentcode  is not valid Or not  numeric"),
	ERROR311("[311]","The Size of the Input in ridercode  is not valid Or not  numeric"),
	ERROR312("[312]","The value of the Input in age  is not valid Or not  numeric"),
	ERROR313("[313]","The Size of the Input in total charges  is not valid Or not  numeric"),
	ERROR999("[999]","There is Some Problem in API Call.Please Contact Administrator");
	
	private final String errorCode;
	private final String errorMessage;
	
	TrawellTagException(String code, String message){
		this.errorCode = code;
		this.errorMessage = message;
	}
    public static String getErrorMessage(String errorCode){
    	String errorMessage = "";
    	for (TrawellTagException trawellTagException : TrawellTagException.values()) {
			if(errorCode.equalsIgnoreCase(trawellTagException.getErrorCode())){
				errorMessage = trawellTagException.getErrorMessage();
			}
		}
    	return errorMessage;
    }
	public String getErrorCode() {
		return errorCode;
	}

	public String getErrorMessage() {
		return errorMessage;
	}
}
